{"ast":null,"code":"import { __extends } from \"tslib\";\nimport { Observable } from \"../../utilities/index.js\";\nimport { ApolloLink } from \"../core/index.js\";\nexport function onError(errorHandler) {\n  return new ApolloLink(function (operation, forward) {\n    return new Observable(function (observer) {\n      var sub;\n      var retriedSub;\n      var retriedResult;\n\n      try {\n        sub = forward(operation).subscribe({\n          next: function (result) {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation: operation,\n                forward: forward\n              });\n\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer)\n                });\n                return;\n              }\n            }\n\n            observer.next(result);\n          },\n          error: function (networkError) {\n            retriedResult = errorHandler({\n              operation: operation,\n              networkError: networkError,\n              graphQLErrors: networkError && networkError.result && networkError.result.errors,\n              forward: forward\n            });\n\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer)\n              });\n              return;\n            }\n\n            observer.error(networkError);\n          },\n          complete: function () {\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          }\n        });\n      } catch (e) {\n        errorHandler({\n          networkError: e,\n          operation: operation,\n          forward: forward\n        });\n        observer.error(e);\n      }\n\n      return function () {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\n\nvar ErrorLink = function (_super) {\n  __extends(ErrorLink, _super);\n\n  function ErrorLink(errorHandler) {\n    var _this = _super.call(this) || this;\n\n    _this.link = onError(errorHandler);\n    return _this;\n  }\n\n  ErrorLink.prototype.request = function (operation, forward) {\n    return this.link.request(operation, forward);\n  };\n\n  return ErrorLink;\n}(ApolloLink);\n\nexport { ErrorLink };","map":{"version":3,"mappings":"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","names":["Observable","ApolloLink","onError","errorHandler","operation","forward","sub","retriedSub","retriedResult","subscribe","next","result","errors","graphQLErrors","response","observer","bind","error","complete","networkError","e","unsubscribe","__extends","_super","_this","link","ErrorLink","request"],"sources":["/home/ridzc/MEGA/dev/apolloserverExpressTuteByPedroTech/client/node_modules/@apollo/src/link/error/index.ts"],"sourcesContent":["import { ExecutionResult } from 'graphql';\n\nimport { NetworkError, GraphQLErrors } from '../../errors';\nimport { Observable } from '../../utilities';\nimport { ApolloLink, Operation, FetchResult, NextLink } from '../core';\n\nexport interface ErrorResponse {\n  graphQLErrors?: GraphQLErrors;\n  networkError?: NetworkError;\n  response?: ExecutionResult;\n  operation: Operation;\n  forward: NextLink;\n}\n\nexport namespace ErrorLink {\n  /**\n   * Callback to be triggered when an error occurs within the link stack.\n   */\n  export interface ErrorHandler {\n    (error: ErrorResponse): Observable<FetchResult> | void;\n  }\n}\n\n// For backwards compatibility.\nexport import ErrorHandler = ErrorLink.ErrorHandler;\n\nexport function onError(errorHandler: ErrorHandler): ApolloLink {\n  return new ApolloLink((operation, forward) => {\n    return new Observable(observer => {\n      let sub: any;\n      let retriedSub: any;\n      let retriedResult: any;\n\n      try {\n        sub = forward(operation).subscribe({\n          next: result => {\n            if (result.errors) {\n              retriedResult = errorHandler({\n                graphQLErrors: result.errors,\n                response: result,\n                operation,\n                forward,\n              });\n\n              if (retriedResult) {\n                retriedSub = retriedResult.subscribe({\n                  next: observer.next.bind(observer),\n                  error: observer.error.bind(observer),\n                  complete: observer.complete.bind(observer),\n                });\n                return;\n              }\n            }\n            observer.next(result);\n          },\n          error: networkError => {\n            retriedResult = errorHandler({\n              operation,\n              networkError,\n              //Network errors can return GraphQL errors on for example a 403\n              graphQLErrors:\n                networkError &&\n                networkError.result &&\n                networkError.result.errors,\n              forward,\n            });\n            if (retriedResult) {\n              retriedSub = retriedResult.subscribe({\n                next: observer.next.bind(observer),\n                error: observer.error.bind(observer),\n                complete: observer.complete.bind(observer),\n              });\n              return;\n            }\n            observer.error(networkError);\n          },\n          complete: () => {\n            // disable the previous sub from calling complete on observable\n            // if retry is in flight.\n            if (!retriedResult) {\n              observer.complete.bind(observer)();\n            }\n          },\n        });\n      } catch (e) {\n        errorHandler({ networkError: e, operation, forward });\n        observer.error(e);\n      }\n\n      return () => {\n        if (sub) sub.unsubscribe();\n        if (retriedSub) sub.unsubscribe();\n      };\n    });\n  });\n}\n\nexport class ErrorLink extends ApolloLink {\n  private link: ApolloLink;\n  constructor(errorHandler: ErrorLink.ErrorHandler) {\n    super();\n    this.link = onError(errorHandler);\n  }\n\n  public request(\n    operation: Operation,\n    forward: NextLink,\n  ): Observable<FetchResult> | null {\n    return this.link.request(operation, forward);\n  }\n}\n"]},"metadata":{},"sourceType":"module"}